from telethon import TelegramClient, events, Button
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("TelegramForwarder")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_ID = "YOUR_API_ID"
API_HASH = "YOUR_API_HASH"
BOT_TOKEN = "YOUR_BOT_TOKEN"

ADMIN_ID = "NoTrustNetAdmin"

# –ö–∞–Ω–∞–ª—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
CHANNELS = {
    "chp_donetska": "ShestDonetsk",
    "moscowach": "MosNevSlp",
    "mash_siberia": "ShestNovosib",
    "e1_news": "ShestEKB",
    "kazancity": "ShestKazan",
    "incidentkld": "ShestKaliningrad",
    "etorostov": "ShestRostov",
    "moynizhny": "ShestNN",
    "naebnet": "NoTrustNet",
    "expltgk": [
        "ShestDonetsk", "MosNevSlp", "ShestNovosib", "ShestEKB", "ShestKazan",
        "ShestKaliningrad", "ShestRostov", "ShestNN", "NoTrustNet"
    ],
    "https://t.me/+QUo4lv3MKq04Yjk6": "Piterburg24na7"
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã
AD_KEYWORDS = [
    "—Ä–µ–∫–ª–∞–º–∞", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–±—Ä–µ–Ω–¥–∏–Ω–≥", "SMM", "SEO", "–ª–µ–Ω–¥–∏–Ω–≥–∏", "–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä—ã",
    "—Ä–µ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥", "—Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏", "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"
]

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
client = TelegramClient("bot", API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage(chats=list(CHANNELS.keys())))
async def forward_message(event):
    source_chat = event.chat_id
    target_chats = CHANNELS.get(event.chat.username, [])
    if not isinstance(target_chats, list):
        target_chats = [target_chats]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
    if any(keyword in event.raw_text.lower() for keyword in AD_KEYWORDS):
        await client.send_message(ADMIN_ID, "üö® –ù–∞–π–¥–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞! –ß—Ç–æ –¥–µ–ª–∞—Ç—å?", buttons=[
            [Button.inline("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", data=f"approve:{event.id}"), Button.inline("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", data=f"reject:{event.id}")]
        ])
        return

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –∫–∞–Ω–∞–ª—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    for chat in target_chats:
        try:
            await client.send_message(chat, event.message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@client.on(events.CallbackQuery())
async def callback_handler(event):
    data = event.data.decode("utf-8")
    action, msg_id = data.split(":")
    message = await event.get_message()

    if action == "approve":
        for chat in CHANNELS.values():
            if isinstance(chat, list):
                for sub_chat in chat:
                    await client.send_message(sub_chat, message)
            else:
                await client.send_message(chat, message)
        await event.edit("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    elif action == "reject":
        await event.edit("üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
client.run_until_disconnected()
