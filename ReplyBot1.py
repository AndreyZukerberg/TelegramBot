import os
import asyncio
import sqlite3
import logging
import imagehash
from PIL import Image
import numpy as np
import cv2
import ffmpeg
from aiogram import Bot, Dispatcher, types
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7616945089:AAFBZnirPqwYdGl_ZfG-cXC31qTdwnAxqVM"

# –ö–∞–Ω–∞–ª—ã
SOURCE_CHANNELS = ["-1001234567890", "-1009876543210"]  # ID –∫–∞–Ω–∞–ª–æ–≤
TARGET_CHANNEL = "-1001122334455"  # ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
ADMIN_ID = 123456789  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ DefaultBotProperties
default_properties = DefaultBotProperties(parse_mode="HTML")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º default_properties
bot = Bot(token=TOKEN, default=default_properties)

dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
conn = sqlite3.connect("bot_data.db")
cur = conn.cursor()
cur.execute("""
    CREATE TABLE IF NOT EXISTS posts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        text_hash TEXT,
        image_hash TEXT,
        video_hash TEXT
    )
""")
conn.commit()

# –§–∏–ª—å—Ç—Ä —Ä–µ–∫–ª–∞–º—ã
AD_WORDS = ["—Ä–µ–∫–ª–∞–º–∞", "–ø–æ–¥–ø–∏—à–∏—Å—å", "—Å–∫–∏–¥–∫–∞", "–∞–∫—Ü–∏—è", "–∫—É–ø–∏—Ç—å", "–º–∞–≥–∞–∑–∏–Ω", "–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ"]

def is_advertisement(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–º."""
    text = text.lower()
    return any(word in text for word in AD_WORDS)

def get_text_hash(text):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞."""
    return str(imagehash.phash(Image.fromarray(np.array(bytearray(text.encode()), dtype=np.uint8).reshape(1, -1))))

def get_image_hash(image_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    image = Image.open(image_path).convert("L").resize((8, 8))
    return str(imagehash.phash(image))

def get_video_hash(video_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ."""
    cap = cv2.VideoCapture(video_path)
    success, frame = cap.read()
    cap.release()
    if success:
        image = Image.fromarray(frame).convert("L").resize((8, 8))
        return str(imagehash.phash(image))
    return None

def remove_watermark(image_path):
    """–ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Ç–µ—Ä–º–∞—Ä–æ–∫."""
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, mask = cv2.threshold(gray, 240, 255, cv2.THRESH_BINARY)
    image[mask == 255] = (255, 255, 255)
    output_path = image_path.replace(".jpg", "_clean.jpg")
    cv2.imwrite(output_path, image)
    return output_path

def clean_text(text):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏."""
    to_remove = ["üí¨–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª‚úÖ", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è | –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"]
    for phrase in to_remove:
        text = text.replace(phrase, "")
    text += f"\n\nüîó <a href='https://t.me/ShestDonetsk'>–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</a>"
    return text.strip()

@dp.message(F.chat.id.in_(SOURCE_CHANNELS))  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ ID –∫–∞–Ω–∞–ª–æ–≤
async def handle_channel_post(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ."""
    if message.text and is_advertisement(message.text):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"approve_{message.message_id}")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"reject_{message.message_id}")]
        ])
        await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –í–û–ó–ú–û–ñ–ù–ê–Ø –†–ï–ö–õ–ê–ú–ê ‚ö†Ô∏è\n\n{message.text}", reply_markup=keyboard)
        return

    text_hash = get_text_hash(message.text) if message.text else None
    image_hash = None
    video_hash = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    cur.execute("SELECT id FROM posts WHERE text_hash = ? OR image_hash = ? OR video_hash = ?", (text_hash, image_hash, video_hash))
    if cur.fetchone():
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if message.photo:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_path = f"downloads/{photo.file_id}.jpg"
        await bot.download_file(file.file_path, file_path)
        image_hash = get_image_hash(file_path)

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏
        clean_path = remove_watermark(file_path)
        await bot.send_photo(TARGET_CHANNEL, photo=open(clean_path, "rb"), caption=clean_text(message.caption or ""))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    elif message.video:
        file = await bot.get_file(message.video.file_id)
        file_path = f"downloads/{message.video.file_id}.mp4"
        await bot.download_file(file.file_path, file_path)
        video_hash = get_video_hash(file_path)

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
        await bot.send_video(TARGET_CHANNEL, video=open(file_path, "rb"), caption=clean_text(message.caption or ""))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–µ—à–µ–π
    cur.execute("INSERT INTO posts (text_hash, image_hash, video_hash) VALUES (?, ?, ?)", (text_hash, image_hash, video_hash))
    conn.commit()

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if message.text:
        await bot.send_message(TARGET_CHANNEL, clean_text(message.text))

@dp.callback_query(F.data)
async def moderation_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤."""
    action, msg_id = callback_query.data.split("_")

    if action == "approve":
        msg = await bot.forward_message(TARGET_CHANNEL, ADMIN_ID, int(msg_id))
        await callback_query.message.edit_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {TARGET_CHANNEL}")

    elif action == "reject":
        await callback_query.message.edit_text("‚ùå –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω")

    await callback_query.answer()

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    os.makedirs("downloads", exist_ok=True)
    await bot.delete_webhook(drop_pending_updates=True)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message(lambda message: message.chat.id in SOURCE_CHANNELS)(handle_channel_post)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())